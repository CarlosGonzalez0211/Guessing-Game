import java.util.*;

public class CompCorrection {

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        System.out.println("Let's start this game!");

        int[] start = setupBoard();

        int[] startGame = new int[start.length];
        int attempts = (startGame.length / 2) + 2;

        displayMainMenu(attempts);

        System.out.println("Choose an option: ");
        int selection = input.nextInt();
        int runGameVar = 0;

        switch (selection) {

            case 1:

                for (int i = attempts; i >= 1; i--) {

                    System.out.println("You have only " + i + " attempts left");
                    runGameVar = runGame(startGame, start);

                    if (runGameVar == 3) {

                        System.out.println("Congrats! You won!");
                        break;

                    } else {

                        System.out.println("Game over, loser");
                    }
                }

                break;

            case 2:

                while (runGameVar != 3) {

                    runGameVar = runGame(startGame, start);

                    if (runGameVar == 3) {

                        System.out.println("Congrats! You won!");
                        break;
                    }
                }

                break;

            case 3:

                System.out.println("...exiting game");

                break;

            default:

                System.out.println("Invalid input. Please enter a number between 1 and 3");
                selection = input.nextInt();
                break;
        }

    }

    private static int runGame(int[] playingBoard, int[] board) {

        Scanner input = new Scanner(System.in);

        int boardLength = playingBoard.length;

        displayBoard(playingBoard);

        // Here we are going to start working on the first selected cell
        System.out.println("Input the number of the cell: ");
        int cell1 = input.nextInt();

        boolean cellBound = isWithinBounds(boardLength, cell1);

        while (cellBound == false) {

            System.out.println("Invalid input. Please try again");
            cell1 = input.nextInt();
            cellBound = isWithinBounds(boardLength, cell1);
        }

        boolean cellBool = isCellSelected(playingBoard, cell1);

        while (cellBool == true) {

            System.out.println("That cell has been already cleared");
            System.out.println("Try again with another cell number");
            cell1 = input.nextInt();
            cellBool = isCellSelected(playingBoard, cell1);
        }

        clearCell(playingBoard, cell1, board[cell1]);
        displayBoard(playingBoard);

        System.out.println("You got one cell");
        System.out.println("Now find the pair!");

        // Here we are going to start working on the second selected cell
        System.out.println("Input the number of the cell: ");
        int cell2 = input.nextInt();

        cellBound = isWithinBounds(boardLength, cell2);

        while (cellBound == false) {

            System.out.println("Invalid input. Please try again");
            cell2 = input.nextInt();

            cellBound = isWithinBounds(boardLength, cell2);
        }

        cellBool = isCellSelected(playingBoard, cell2);

        while (cellBool == true) {

            System.out.println("That cell has been already cleared");
            System.out.println("Try again with another cell number");
            cell2 = input.nextInt();
            cellBool = isCellSelected(playingBoard, cell2);
        }

        clearCell(playingBoard, cell2, board[cell2]);
        displayBoard(playingBoard);

        // In case the user gets the pair
        if (playingBoard[cell1] == playingBoard[cell2]) {

            System.out.println("Congrats! You found one pair!");

            boolean boardBool = isBoardCleared(playingBoard);

            if (boardBool == true) {
                return 3;

            } else {
                return 0;
            }

            // In case the user doesn't get the pair.
        } else {

            System.out.println("That wasn't the pair");
            clearCell(playingBoard, cell1, 0);
            clearCell(playingBoard, cell2, 0);

            return 0;
        }
    }

    private static boolean isWithinBounds(int boardLength, int cell) {

        boolean bounds;

        if (cell >= 0 && cell < boardLength) {

            bounds = true;

        } else {

            bounds = false;
        }

        return bounds;

    }

    private static int[] setupBoard() {

        Scanner input = new Scanner(System.in);
        int[] start;

        System.out.println("Enter the size of the board (even number):");
        int boardSize = input.nextInt();

        // Checking our conditionals
        while (boardSize % 2 != 0 || boardSize < 2) {

            System.out.println("Enter the size of the board (even number):");
            boardSize = input.nextInt();

        }

        // Creating an array with the length of the user's input
        start = new int[boardSize];
        placePairs(start);

        return start;

    }

    private static void displayMainMenu(int attempts) {

        System.out.println("Do you wish to play for: ");
        System.out.println("1. " + attempts + " attempts");
        System.out.println("2. Unlimited number of attempts");
        System.out.println("3. Exit game");

    }

    private static void displayBoard(int[] board) {

        for (int i = 0; i < board.length; i++) {
            System.out.print("  " + i + " ");
        }
        System.out.println();

        for (int i = 0; i < board.length; i++) {
            System.out.print("----");
        }
        System.out.println();

        System.out.print("| ");
        for (int i = 0; i < board.length; i++) {

            if (board[i] == 0) {
                System.out.print("? | ");

            } else {
                System.out.print(board[i] + " | ");
            }
        }

        System.out.println();
    }

    private static boolean isCellSelected(int[] board, int cell) {

        boolean cellBool = false;

        if (board[cell] != 0) {
            cellBool = true;

        }
        return cellBool;
    }

    private static void clearCell(int[] board, int cell, int value) {

        board[cell] = value;
    }

    private static boolean isBoardCleared(int[] board) {

        for (int i = 0; i < board.length; i++) {

            if (board[i] == 0) {
                return false;
            }
        }
        return true;
    }

    private static void placePairs(int[] board) {

        Random rand = new Random();

        // place the values in the array in order
        for (int i = 0; i < board.length; i++)
            board[i] = i / 2 + 1;

        // perfect array shuffle
        // swap the ith value with a random value from index i to end of array
        for (int i = 0; i < board.length - 1; i++) {

            int j = rand.nextInt(board.length - i);
            int temp = board[i];

            board[i] = board[j];
            board[j] = temp;
        }

    }
}
